#
# Copyright 2024 tosit.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Run integration tests
description: Run integration tests

inputs:
  ci-repo:
    description: The CI registry repo URL
    required: true
  image:
    description: Spark image name to test (ex. spark)
    required: true
  image-tag:
    description: Spark image tag to test (ex. latest)
    required: true
  scala_version:
    description: Scala version
    required: true
  git_checkout_tag_dir:
    description: Git checkout tag directory
    required: true

runs:
  using: composite
  # https://github.com/apache/spark/tree/master/resource-managers/kubernetes/integration-tests
  # https://github.com/apache/spark/blob/master/.github/workflows/build_and_test.yml
  # https://github.com/apache/spark/pull/35830
  steps:
    - name: Load image ${{ inputs.image }} into Kind and setup Spark RBACs
      run: |
          kubectl create clusterrolebinding serviceaccounts-cluster-admin \
              --clusterrole=cluster-admin \
              --group=system:serviceaccounts || true
          # Pull and Load the image into all kind nodes (current setup mono node) for fast executors startup
          docker pull ${{ inputs.ci-repo}}/${{ inputs.image }}:${{ inputs.image-tag }} 
          kind load docker-image ${{ inputs.ci-repo}}/${{ inputs.image }}:${{ inputs.image-tag }} --name kind-ci-${{ github.job }}
      shell: bash

    - name: Change Scala version to ${{ inputs.scala_version }}
      run: |
         ./dev/change-scala-version.sh ${{ inputs.scala_version }}
         echo "SCALA_PROFILE=scala-${{ inputs.scala_version }}" >> $GITHUB_ENV
      
      working-directory: ${{ inputs.git_checkout_tag_dir }}
      shell: bash

    - name: Run base integration tests (${{ inputs.image }})
      if: inputs.image == 'spark-base' || inputs.image == 'spark'
      run: |
          build/sbt -P${{ env.SCALA_PROFILE }} -Pkubernetes -Pkubernetes-integration-tests \
                    -Dspark.kubernetes.test.driverRequestCores=0.5 -Dspark.kubernetes.test.executorRequestCores=0.2 \
                    -Dspark.kubernetes.test.deployMode=cloud  \
                    -Dspark.kubernetes.test.imageRepo=${{ inputs.ci-repo}} -Dspark.kubernetes.test.imageTag=${{ inputs.image-tag }} \
                    -Dspark.kubernetes.test.jvmImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.rImage=${{ inputs.image }} \
                    'kubernetes-integration-tests/testOnly -- -z "Run SparkPi"'

      working-directory: ${{ inputs.git_checkout_tag_dir }}
      shell: bash

    - name: Run spark-py integration tests (${{ inputs.image }})
      if: inputs.image == 'spark-py'
      run: |
          build/sbt -P${{ env.SCALA_PROFILE }} -Pkubernetes -Pkubernetes-integration-tests \
                    -Dspark.kubernetes.test.driverRequestCores=0.5 -Dspark.kubernetes.test.executorRequestCores=0.2 \
                    -Dspark.kubernetes.test.deployMode=cloud  \
                    -Dspark.kubernetes.test.imageRepo=${{ inputs.ci-repo}} -Dspark.kubernetes.test.imageTag=${{ inputs.image-tag }} \
                    -Dspark.kubernetes.test.jvmImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.rImage=${{ inputs.image }} \
                    'kubernetes-integration-tests/testOnly -- -z "Run PySpark"'

      working-directory: ${{ inputs.git_checkout_tag_dir }}
      shell: bash

    - name: Run spark-r integration tests (${{ inputs.image }})
      if: inputs.image == 'spark-r'
      run: |
          build/sbt -P${{ env.SCALA_PROFILE }} -Pkubernetes -Pkubernetes-integration-tests \
                    -Dspark.kubernetes.test.driverRequestCores=0.5 -Dspark.kubernetes.test.executorRequestCores=0.2 \
                    -Dspark.kubernetes.test.deployMode=cloud  \
                    -Dspark.kubernetes.test.imageRepo=${{ inputs.ci-repo}} -Dspark.kubernetes.test.imageTag=${{ inputs.image-tag }} \
                    -Dspark.kubernetes.test.jvmImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
                    -Dspark.kubernetes.test.rImage=${{ inputs.image }} \
                    -Psparkr -Dtest.include.tags=r \
                    'kubernetes-integration-tests/testOnly'

      working-directory: ${{ inputs.git_checkout_tag_dir }}
      shell: bash

    # - name: Run All integration tests (${{ inputs.image }})
    #   if: inputs.image == 'spark-py-r'
    #   run: |
    #       build/sbt -P${{ env.SCALA_PROFILE }} -Pkubernetes -Pkubernetes-integration-tests \
    #                 -Dspark.kubernetes.test.driverRequestCores=0.5 -Dspark.kubernetes.test.executorRequestCores=0.2 \
    #                 -Dspark.kubernetes.test.deployMode=cloud  \
    #                 -Dspark.kubernetes.test.imageRepo=${{ inputs.ci-repo}} -Dspark.kubernetes.test.imageTag=${{ inputs.image-tag }} \
    #                 -Dspark.kubernetes.test.jvmImage=${{ inputs.image }} \
    #                 -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
    #                 -Dspark.kubernetes.test.pythonImage=${{ inputs.image }} \
    #                 -Dspark.kubernetes.test.rImage=${{ inputs.image }} \
    #                 'kubernetes-integration-tests/testOnly'

    #   working-directory: ${{ inputs.git_checkout_tag_dir }}
    #   shell: bash

