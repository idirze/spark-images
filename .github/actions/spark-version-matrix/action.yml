name: Build Spark versions matrix
description: Build Spark versions matrix from '.build/versions.yml' and '.build/reference_versions.yml' files

outputs:
  matrix:
    description: "Spark versions matrix"
    value: ${{ steps.generate-matrix.outputs.matrix }}

runs:
  using: composite
  steps:
    - name: Generate Matrix
      id: generate-matrix
      run: |
          INPUT_MATRIX=$(yq -oj .build/versions.yml | jq '.version | .[] | 
               {python_version: .python_version, 
               hadoop_version: .hadoop_version, 
               spark_dist_download_url: .spark_dist_download_url} + 
               (.spark_version[] | {spark_version: .}) + 
               (.scala_version[] | {scala_version: .}) +
               (.java_version[] | {java_version: .})' | jq -c --slurp '.')
          REF_MATRIX=$(yq -oj .build/reference_versions.yml | jq '.version | .[] | 
               {python_version: .python_version, 
               hadoop_version: .hadoop_version, 
               spark_dist_download_url: .spark_dist_download_url} + 
               (.spark_version[] | {spark_version: .}) + 
               (.scala_version[] | {scala_version: .}) +
               (.java_version[] | {java_version: .})' | jq -c --slurp '.')

          ### Intersection between the .version matrix and the reference matrix
          ### When the intersection is empty, the jobs are skipped!
          MATRIX=$(jq --argjson IN ${INPUT_MATRIX} --argjson REF ${REF_MATRIX} -cn '$IN - ($IN- $REF)' | jq .)

          LENGHT=$(echo ${MATRIX} | jq '. | length')
          echo "${MATRIX}"
          echo "Found ${LENGHT} matrix combinations"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
      shell: bash
