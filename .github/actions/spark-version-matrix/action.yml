#
# Copyright 2024 tosit.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build Spark versions matrix
description: Build Spark versions matrix from '.build/versions.yml' and '.build/reference-versions.yml' files

inputs:
  test_only:
    description: Get Spark matrix version for tests
    required: false
    default: 'false'

outputs:
  matrix:
    description: "Spark versions matrix"
    value: ${{ steps.generate-matrix.outputs.matrix }}

runs:
  using: composite
  steps:
    - name: Generate Matrix
      id: generate-matrix
      run: |

          BUILD_VERSION_FILE=".build/versions.yml"
          if [[ "${{ inputs.test_only }}" == "true" ]]
          then
             BUILD_VERSION_FILE=".build/test-versions.yml"
          fi

          INPUT_MATRIX=$(yq -oj ${BUILD_VERSION_FILE} | jq '.version | .[] | 
               {python_version: .python_version, 
               hadoop_version: .hadoop_version, 
               spark_dist_download_url: .spark_dist_download_url} + 
               (.spark_version[] | {spark_version: .}) + 
               (.scala_version[] | {scala_version: .}) +
               (.java_version[] | {java_version: .})' | jq -c --slurp '.')
          REF_MATRIX=$(yq -oj .build/reference-versions.yml | jq '.version | .[] | 
               {python_version: .python_version, 
               hadoop_version: .hadoop_version, 
               spark_dist_download_url: .spark_dist_download_url} + 
               (.spark_version[] | {spark_version: .}) + 
               (.scala_version[] | {scala_version: .}) +
               (.java_version[] | {java_version: .})' | jq -c --slurp '.')

          ### Intersection between the .version matrix and the reference matrix
          ### When the intersection is empty, the jobs are skipped!
          MATRIX=$(jq --argjson IN ${INPUT_MATRIX} --argjson REF ${REF_MATRIX} -cn '$IN - ($IN- $REF)')

          LENGHT=$(echo ${MATRIX} | jq '. | length')
          echo "${MATRIX}"
          echo "Found ${LENGHT} matrix combinations"
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

      shell: bash
